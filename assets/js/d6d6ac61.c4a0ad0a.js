"use strict";(self.webpackChunknodejs_mobile_docs=self.webpackChunknodejs_mobile_docs||[]).push([[311],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function d(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?d(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):d(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},d=Object.keys(e);for(n=0;n<d.length;n++)r=d[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(n=0;n<d.length;n++)r=d[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,d=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(r),g=o,m=p["".concat(s,".").concat(g)]||p[g]||l[g]||d;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var d=r.length,i=new Array(d);i[0]=g;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:o,i[1]=a;for(var c=2;c<d;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},4438:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>d,metadata:()=>a,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const d={sidebar_position:3,title:"Redirect output streams to logcat"},i=void 0,a={unversionedId:"guide/guide-android/redirect-to-logcat",id:"guide/guide-android/redirect-to-logcat",title:"Redirect output streams to logcat",description:"This guide will guide you on how to redirect the stdout and stderr streams to adb logcat on Android.",source:"@site/docs/guide/guide-android/redirect-to-logcat.md",sourceDirName:"guide/guide-android",slug:"/guide/guide-android/redirect-to-logcat",permalink:"/docs/guide/guide-android/redirect-to-logcat",draft:!1,editUrl:"https://github.com/nodejs-mobile/nodejs-mobile.github.io/tree/main/docs/guide/guide-android/redirect-to-logcat.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Redirect output streams to logcat"},sidebar:"docs",previous:{title:"Building complex projects",permalink:"/docs/guide/guide-android/building-complex"},next:{title:"Getting started",permalink:"/docs/guide/guide-ios/getting-started"}},s={},c=[{value:"Redirect the stdout and stderr to logcat",id:"redirect-the-stdout-and-stderr-to-logcat",level:3}],u={toc:c},p="wrapper";function l(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This guide will guide you on how to redirect the ",(0,o.kt)("inlineCode",{parentName:"p"},"stdout")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"stderr")," streams to ",(0,o.kt)("inlineCode",{parentName:"p"},"adb logcat")," on Android."),(0,o.kt)("p",null,"A complete project where this technique is applied can also be downloaded ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nodejs-mobile/nodejs-mobile-samples"},"from the samples repo"),"."),(0,o.kt)("h3",{id:"redirect-the-stdout-and-stderr-to-logcat"},"Redirect the stdout and stderr to logcat"),(0,o.kt)("p",null,"The Node.js runtime and the Node.js ",(0,o.kt)("inlineCode",{parentName:"p"},"console")," module use the process' ",(0,o.kt)("inlineCode",{parentName:"p"},"stdout")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"stderr")," streams. Some code is needed to redirect those streams to the Android system log, so they can be viewed with ",(0,o.kt)("inlineCode",{parentName:"p"},"logcat"),". C++ code to manage the redirection can be included by starting two background threads (one for ",(0,o.kt)("inlineCode",{parentName:"p"},"stdout")," and the other for ",(0,o.kt)("inlineCode",{parentName:"p"},"stderr"),"), to provide a more pleasant Node.js debugging experience."),(0,o.kt)("p",null,"Add the helper functions to ",(0,o.kt)("inlineCode",{parentName:"p"},"native-lib.cpp"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="app/src/main/cpp/native-lib.cpp"',title:'"app/src/main/cpp/native-lib.cpp"'},"#include <pthread.h>\n#include <unistd.h>\n#include <android/log.h>\n\n//...\n\n// Start threads to redirect stdout and stderr to logcat.\nint pipe_stdout[2];\nint pipe_stderr[2];\npthread_t thread_stdout;\npthread_t thread_stderr;\nconst char *ADBTAG = \"NODEJS-MOBILE\";\n\nvoid *thread_stderr_func(void*) {\n    ssize_t redirect_size;\n    char buf[2048];\n    while((redirect_size = read(pipe_stderr[0], buf, sizeof buf - 1)) > 0) {\n        //__android_log will add a new line anyway.\n        if(buf[redirect_size - 1] == '\\n')\n            --redirect_size;\n        buf[redirect_size] = 0;\n        __android_log_write(ANDROID_LOG_ERROR, ADBTAG, buf);\n    }\n    return 0;\n}\n\nvoid *thread_stdout_func(void*) {\n    ssize_t redirect_size;\n    char buf[2048];\n    while((redirect_size = read(pipe_stdout[0], buf, sizeof buf - 1)) > 0) {\n        //__android_log will add a new line anyway.\n        if(buf[redirect_size - 1] == '\\n')\n            --redirect_size;\n        buf[redirect_size] = 0;\n        __android_log_write(ANDROID_LOG_INFO, ADBTAG, buf);\n    }\n    return 0;\n}\n\nint start_redirecting_stdout_stderr() {\n    //set stdout as unbuffered.\n    setvbuf(stdout, 0, _IONBF, 0);\n    pipe(pipe_stdout);\n    dup2(pipe_stdout[1], STDOUT_FILENO);\n\n    //set stderr as unbuffered.\n    setvbuf(stderr, 0, _IONBF, 0);\n    pipe(pipe_stderr);\n    dup2(pipe_stderr[1], STDERR_FILENO);\n\n    if(pthread_create(&thread_stdout, 0, thread_stdout_func, 0) == -1)\n        return -1;\n    pthread_detach(thread_stdout);\n\n    if(pthread_create(&thread_stderr, 0, thread_stderr_func, 0) == -1)\n        return -1;\n    pthread_detach(thread_stderr);\n\n    return 0;\n}\n")),(0,o.kt)("p",null,"Start the redirection right begore starting the Node.js runtime:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'    //Start threads to show stdout and stderr in logcat.\n    if (start_redirecting_stdout_stderr()==-1) {\n        __android_log_write(ANDROID_LOG_ERROR, ADBTAG, "Couldn\'t start redirecting stdout and stderr to logcat.");\n    }\n\n    //Start node, with argc and argv.\n    return jint(node::Start(argument_count,argv));\n')))}l.isMDXComponent=!0}}]);