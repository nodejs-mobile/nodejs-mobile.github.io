"use strict";(self.webpackChunknodejs_mobile_docs=self.webpackChunknodejs_mobile_docs||[]).push([[160],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=i.createContext({}),s=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(d.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,h=u["".concat(d,".").concat(m)]||u[m]||c[m]||r;return n?i.createElement(h,o(o({ref:t},p),{},{components:n})):i.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8121:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:1,title:"Getting started"},o=void 0,l={unversionedId:"guide/guide-android/getting-started",id:"guide/guide-android/getting-started",title:"Getting started",description:"Download the library",source:"@site/docs/guide/guide-android/getting-started.md",sourceDirName:"guide/guide-android",slug:"/guide/guide-android/getting-started",permalink:"/docs/guide/guide-android/getting-started",draft:!1,editUrl:"https://github.com/nodejs-mobile/nodejs-mobile.github.io/tree/main/docs/guide/guide-android/getting-started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Getting started"},sidebar:"docs",previous:{title:"Getting started",permalink:"/docs/guide/intro"},next:{title:"Building complex projects",permalink:"/docs/guide/guide-android/building-complex"}},d={},s=[{value:"Download the library",id:"download-the-library",level:3},{value:"Creating your First Project",id:"creating-your-first-project",level:3},{value:"Android SDK Requirements",id:"android-sdk-requirements",level:3},{value:"Create an Android Studio Project",id:"create-an-android-studio-project",level:3},{value:"Copy libnode&#39;s header files",id:"copy-libnodes-header-files",level:3},{value:"Add native JNI function to start Node.js",id:"add-native-jni-function-to-start-nodejs",level:3},{value:"Call <code>startNodeWithArguments</code> from Java",id:"call-startnodewitharguments-from-java",level:3},{value:"Load <code>libnode.so</code>",id:"load-libnodeso",level:4},{value:"Remove references to <code>stringFromJNI</code>",id:"remove-references-to-stringfromjni",level:4},{value:"Start a background thread to run <code>startNodeWithArguments</code>",id:"start-a-background-thread-to-run-startnodewitharguments",level:4},{value:"Specify required permissions in the manifest",id:"specify-required-permissions-in-the-manifest",level:3},{value:"Add libnode.so to the project",id:"add-libnodeso-to-the-project",level:3},{value:"Copy the library files",id:"copy-the-library-files",level:4},{value:"Configure CMake",id:"configure-cmake",level:4},{value:"Configure the app&#39;s gradle settings",id:"configure-the-apps-gradle-settings",level:4},{value:"Add simple UI for testing",id:"add-simple-ui-for-testing",level:3},{value:"Create a Button and TextView",id:"create-a-button-and-textview",level:4},{value:"Add Button event to access the HTTP server",id:"add-button-event-to-access-the-http-server",level:4}],p={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"download-the-library"},"Download the library"),(0,a.kt)("p",null,"The Android shared libraries are distributed in a zip file, which you can download from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nodejs-mobile/nodejs-mobile/releases"},"core library release page"),"."),(0,a.kt)("p",null,"The zip file contains Android binaries for the ",(0,a.kt)("inlineCode",{parentName:"p"},"armabi-v7a"),", ",(0,a.kt)("del",{parentName:"p"},"x86")," (discontinued), ",(0,a.kt)("inlineCode",{parentName:"p"},"arm64-v8a")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"x86_64")," architectures."),(0,a.kt)("h3",{id:"creating-your-first-project"},"Creating your First Project"),(0,a.kt)("p",null,"The following steps will guide you through creating an Android Studio project that uses the library and is built with Gradle. The complete project can also be downloaded from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nodejs-mobile/nodejs-mobile-samples"},"samples repo"),"."),(0,a.kt)("p",null,"This sample runs the Node.js engine in a background thread to start an HTTP server on port 3000 and return the ",(0,a.kt)("inlineCode",{parentName:"p"},"process.versions")," value. The app's Main Activity UI has a button to query the server and show the server's response. Alternatively, it's also possible to access the server from a browser running on a different device connected to the same local network."),(0,a.kt)("h3",{id:"android-sdk-requirements"},"Android SDK Requirements"),(0,a.kt)("p",null,"When you build your project, Gradle will automatically try to detect any missing dependencies and prompt you to install them from within the Android Studio event log. Here's the list of pre-requisites in case you want to download them from the SDK Manager:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"API Level greater or equal to Android 7.0 (API Level 24)"),(0,a.kt)("li",{parentName:"ul"},"CMake"),(0,a.kt)("li",{parentName:"ul"},"Android SDK Platform-Tools greater or equal to Android 7.0 (API Level 24)"),(0,a.kt)("li",{parentName:"ul"},"Android SDK Build-Tools greater or equal to Android 7.0 (API Level 24)"),(0,a.kt)("li",{parentName:"ul"},"NDK version r24 or greater")),(0,a.kt)("h3",{id:"create-an-android-studio-project"},"Create an Android Studio Project"),(0,a.kt)("p",null,"Using the Android Studio's New Project wizard, create a new Project with the following settings, by the order the options appear in screens:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"Include C++ support")," checked"),(0,a.kt)("li",{parentName:"ol"},"Phone and Tablet with Minimum SDK to ",(0,a.kt)("inlineCode",{parentName:"li"},"API 21: Android 5.0 (Lollipop)")),(0,a.kt)("li",{parentName:"ol"},"Empty activity selected"),(0,a.kt)("li",{parentName:"ol"},"Leave the defaults, which were:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Activity Name: ",(0,a.kt)("inlineCode",{parentName:"li"},"MainActivity")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Generate Layout File")," checked"),(0,a.kt)("li",{parentName:"ul"},"Layout Name: ",(0,a.kt)("inlineCode",{parentName:"li"},"activity_main")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Backwards Compatibility (AppCompat)")," checked")),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Leave the defaults, which were:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"C++ Standard: Toolchain Default"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Exceptions Support (-fexceptions)")," checked OFF"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Runtime Type Information Support (-frtti)")," checked OFF")),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},"Finish")),(0,a.kt)("h3",{id:"copy-libnodes-header-files"},"Copy libnode's header files"),(0,a.kt)("p",null,"To access libnode's ",(0,a.kt)("inlineCode",{parentName:"p"},"Start()")," entrypoint, the libnode's header files are required."),(0,a.kt)("p",null,"Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"libnode/")," folder inside the project's ",(0,a.kt)("inlineCode",{parentName:"p"},"app/")," folder."),(0,a.kt)("p",null,"In the downloaded zip file, you can find the header files inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"include/")," path. Copy this folder to ",(0,a.kt)("inlineCode",{parentName:"p"},"app/libnode/include"),". If it's been done correctly you'll end with the following path for the ",(0,a.kt)("inlineCode",{parentName:"p"},"node.h")," header file: ",(0,a.kt)("inlineCode",{parentName:"p"},"app/libnode/include/node/node.h"),"."),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"app/CMakeLists.txt")," add the following line to add libnode's header files to the CMake include paths:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmake"},"include_directories(libnode/include/node/)\n")),(0,a.kt)("h3",{id:"add-native-jni-function-to-start-nodejs"},"Add native JNI function to start Node.js"),(0,a.kt)("p",null,"Edit ",(0,a.kt)("inlineCode",{parentName:"p"},"native-lib.cpp")," to add the required include files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="app/src/main/cpp/native-lib.cpp"',title:'"app/src/main/cpp/native-lib.cpp"'},'#include <jni.h>\n#include <string>\n#include <cstdlib>\n#include "node.h"\n')),(0,a.kt)("p",null,"Convert the existing ",(0,a.kt)("inlineCode",{parentName:"p"},"stringFromJNI")," function into the ",(0,a.kt)("inlineCode",{parentName:"p"},"startNodeWithArguments")," function, which takes a Java String array, converts it into a ",(0,a.kt)("inlineCode",{parentName:"p"},"libuv")," friendly format and calls ",(0,a.kt)("inlineCode",{parentName:"p"},"node::Start"),". The function's signature has to be adapted to the chosen organization/application name. Use the already existing ",(0,a.kt)("inlineCode",{parentName:"p"},"stringFromJNI")," function as a guide. In this sample's case, it meant changing from:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'extern "C"\nJNIEXPORT jstring JNICALL\nJava_com_yourorg_sample_MainActivity_stringFromJNI(\n        JNIEnv *env,\n        jobject /* this */)\n')),(0,a.kt)("p",null,"to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'extern "C" jint JNICALL\nJava_com_yourorg_sample_MainActivity_startNodeWithArguments(\n        JNIEnv *env,\n        jobject /* this */,\n        jobjectArray arguments)\n')),(0,a.kt)("p",null,"The final ",(0,a.kt)("inlineCode",{parentName:"p"},"native-lib.cpp")," looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="app/src/main/cpp/native-lib.cpp"',title:'"app/src/main/cpp/native-lib.cpp"'},"#include <jni.h>\n#include <string>\n#include <cstdlib>\n#include \"node.h\"\n\n//node's libUV requires all arguments being on contiguous memory.\nextern \"C\" jint JNICALL\nJava_com_yourorg_sample_MainActivity_startNodeWithArguments(\n        JNIEnv *env,\n        jobject /* this */,\n        jobjectArray arguments) {\n\n    //argc\n    jsize argument_count = env->GetArrayLength(arguments);\n\n    //Compute byte size need for all arguments in contiguous memory.\n    int c_arguments_size = 0;\n    for (int i = 0; i < argument_count ; i++) {\n        c_arguments_size += strlen(env->GetStringUTFChars((jstring)env->GetObjectArrayElement(arguments, i), 0));\n        c_arguments_size++; // for '\\0'\n    }\n\n    //Stores arguments in contiguous memory.\n    char* args_buffer = (char*) calloc(c_arguments_size, sizeof(char));\n\n    //argv to pass into node.\n    char* argv[argument_count];\n\n    //To iterate through the expected start position of each argument in args_buffer.\n    char* current_args_position = args_buffer;\n\n    //Populate the args_buffer and argv.\n    for (int i = 0; i < argument_count ; i++)\n    {\n        const char* current_argument = env->GetStringUTFChars((jstring)env->GetObjectArrayElement(arguments, i), 0);\n\n        //Copy current argument to its expected position in args_buffer\n        strncpy(current_args_position, current_argument, strlen(current_argument));\n\n        //Save current argument start position in argv\n        argv[i] = current_args_position;\n\n        //Increment to the next argument's expected position.\n        current_args_position += strlen(current_args_position) + 1;\n    }\n\n    //Start node, with argc and argv.\n    int node_result = node::Start(argument_count, argv);\n    free(args_buffer);\n\n    return jint(node_result);\n\n}\n")),(0,a.kt)("h3",{id:"call-startnodewitharguments-from-java"},"Call ",(0,a.kt)("inlineCode",{parentName:"h3"},"startNodeWithArguments")," from Java"),(0,a.kt)("p",null,"A few changes are required in the application's main file ",(0,a.kt)("inlineCode",{parentName:"p"},"MainActivity.java"),"."),(0,a.kt)("h4",{id:"load-libnodeso"},"Load ",(0,a.kt)("inlineCode",{parentName:"h4"},"libnode.so")),(0,a.kt)("p",null,"Instruct Java to load the ",(0,a.kt)("inlineCode",{parentName:"p"},"libnode.so")," library by adding ",(0,a.kt)("inlineCode",{parentName:"p"},'System.loadLibrary("node");')," to ",(0,a.kt)("inlineCode",{parentName:"p"},"MainActivity.java")," after ",(0,a.kt)("inlineCode",{parentName:"p"},'System.loadLibrary("native-lib");'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class MainActivity extends AppCompatActivity {\n\n    static {\n        System.loadLibrary("native-lib");\n        System.loadLibrary("node");\n    }\n')),(0,a.kt)("p",null,"The prefix ",(0,a.kt)("inlineCode",{parentName:"p"},"lib")," and the suffix ",(0,a.kt)("inlineCode",{parentName:"p"},".so")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"libnode.so")," are omitted."),(0,a.kt)("h4",{id:"remove-references-to-stringfromjni"},"Remove references to ",(0,a.kt)("inlineCode",{parentName:"h4"},"stringFromJNI")),(0,a.kt)("p",null,"Remove the references to the ",(0,a.kt)("inlineCode",{parentName:"p"},"stringFromJNI")," function (which we have replaced in ",(0,a.kt)("inlineCode",{parentName:"p"},"native-lib.cpp"),"), by deleting the following snippets:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"        // Example of a call to a native method\n        TextView tv = (TextView) findViewById(R.id.sample_text);\n        tv.setText(stringFromJNI());\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    /**\n     * A native method that is implemented by the 'native-lib' native library,\n     * which is packaged with this application.\n     */\n    public native String stringFromJNI();\n")),(0,a.kt)("h4",{id:"start-a-background-thread-to-run-startnodewitharguments"},"Start a background thread to run ",(0,a.kt)("inlineCode",{parentName:"h4"},"startNodeWithArguments")),(0,a.kt)("p",null,"The app uses a background thread to run the Node.js engine."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Currently, only a single instance of the Node.js runtime can be started within an application. Restarting the engine after it has finished running is also not supported.")),(0,a.kt)("p",null,"The node code is a simple HTTP server on port 3000 that returns ",(0,a.kt)("inlineCode",{parentName:"p"},"process.versions"),". For simplicity, the node code is embedded in the ",(0,a.kt)("inlineCode",{parentName:"p"},"MainActivity.java")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const http = require('http');\nconst versions_server = http.createServer( (request, response) => {\n  response.end('Versions: ' + JSON.stringify(process.versions));\n});\nversions_server.listen(3000);\n")),(0,a.kt)("p",null,"Add a reference to the ",(0,a.kt)("inlineCode",{parentName:"p"},"startNodeWithArguments")," function, the Java signature is ",(0,a.kt)("inlineCode",{parentName:"p"},"public native Integer startNodeWithArguments(String[] arguments);"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"MainActivity")," class looks like this at this point:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class MainActivity extends AppCompatActivity {\n\n    // Used to load the \'native-lib\' library on application startup.\n    static {\n        System.loadLibrary("native-lib");\n        System.loadLibrary("node");\n    }\n\n    //We just want one instance of node running in the background.\n    public static boolean _startedNodeAlready=false;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        if( !_startedNodeAlready ) {\n            _startedNodeAlready=true;\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    startNodeWithArguments(new String[]{"node", "-e",\n                            "var http = require(\'http\'); " +\n                                    "var versions_server = http.createServer( (request, response) => { " +\n                                    "  response.end(\'Versions: \' + JSON.stringify(process.versions)); " +\n                                    "}); " +\n                                    "versions_server.listen(3000);"\n                    });\n                }\n            }).start();\n        }\n    }\n\n    /**\n     * A native method that is implemented by the \'native-lib\' native library,\n     * which is packaged with this application.\n     */\n    public native Integer startNodeWithArguments(String[] arguments);\n}\n')),(0,a.kt)("h3",{id:"specify-required-permissions-in-the-manifest"},"Specify required permissions in the manifest"),(0,a.kt)("p",null,"Since the app runs an HTTP server, it requires the right permissions in ",(0,a.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml"),". Add the following line under the ",(0,a.kt)("inlineCode",{parentName:"p"},"<manifest>")," tag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="app/src/main/AndroidManifest.xml"',title:'"app/src/main/AndroidManifest.xml"'},'    <uses-permission android:name="android.permission.INTERNET"/>\n')),(0,a.kt)("h3",{id:"add-libnodeso-to-the-project"},"Add libnode.so to the project"),(0,a.kt)("h4",{id:"copy-the-library-files"},"Copy the library files"),(0,a.kt)("p",null,"In the Android Studio Project, there should be a ",(0,a.kt)("inlineCode",{parentName:"p"},"libnode/")," folder inside the project's ",(0,a.kt)("inlineCode",{parentName:"p"},"app/")," folder, created in a previous instruction. Copy the ",(0,a.kt)("inlineCode",{parentName:"p"},"bin/")," folder from inside the downloaded zip file to ",(0,a.kt)("inlineCode",{parentName:"p"},"app/libnode/bin"),". If it's been done correctly you'll end with the following paths for the binaries:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"app/libnode/bin/arm64-v8a/libnode.so"),(0,a.kt)("li",{parentName:"ul"},"app/libnode/bin/armeabi-v7a/libnode.so"),(0,a.kt)("li",{parentName:"ul"},"app/libnode/bin/x86_64/libnode.so")),(0,a.kt)("h4",{id:"configure-cmake"},"Configure CMake"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"app/CMakeLists.txt")," specify the native shared library to import and its location:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmake"},"add_library( libnode\n             SHARED\n             IMPORTED )\nset_target_properties( # Specifies the target library.\n                       libnode\n                       # Specifies the parameter you want to define.\n                       PROPERTIES IMPORTED_LOCATION\n                       # Provides the path to the library you want to import.\n                       ${CMAKE_SOURCE_DIR}/libnode/bin/${ANDROID_ABI}/libnode.so )\n")),(0,a.kt)("p",null,"Add ",(0,a.kt)("inlineCode",{parentName:"p"},"libnode")," to the already existing ",(0,a.kt)("inlineCode",{parentName:"p"},"target_link_libraries"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmake"},"target_link_libraries( # Specifies the target library.\n                       native-lib\n                       # Links imported library.\n                       libnode\n                       # Links the target library to the log library\n                       # included in the NDK.\n                       ${log-lib} )\n")),(0,a.kt)("h4",{id:"configure-the-apps-gradle-settings"},"Configure the app's gradle settings"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"app/build.gradle"),", some changes have to be made to correctly build and package the application."),(0,a.kt)("p",null,"We have to instruct gradle to only package native code for the supported architectures, by adding an ",(0,a.kt)("inlineCode",{parentName:"p"},"ndk")," clause inside ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultConfig"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy"},'        ndk {\n            abiFilters "armeabi-v7a", "arm64-v8a", "x86_64"\n        }\n')),(0,a.kt)("p",null,"The shared library was built using the ",(0,a.kt)("inlineCode",{parentName:"p"},"libC++")," STL, therefore the ",(0,a.kt)("inlineCode",{parentName:"p"},"ANDROID_STL=c++_shared")," definition has to be passed inside the cmake clause in ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultConfig")," with ",(0,a.kt)("inlineCode",{parentName:"p"},'arguments "-DANDROID_STL=c++_shared"'),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy"},'    defaultConfig {\n        applicationId "com.yourorg.sample"\n        minSdkVersion 21\n        targetSdkVersion 25\n        versionCode 1\n        versionName "1.0"\n        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"\n        externalNativeBuild {\n            cmake {\n                cppFlags ""\n                arguments "-DANDROID_STL=c++_shared"\n            }\n        }\n        ndk {\n            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"\n        }\n    }\n')),(0,a.kt)("p",null,"Configure gradle to override its default ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceSets")," to include the ",(0,a.kt)("inlineCode",{parentName:"p"},"libnode.so")," folder path, in the ",(0,a.kt)("inlineCode",{parentName:"p"},"android")," section:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy"},"android {\n//...\n\n    // If you want Gradle to package prebuilt native libraries\n    // with your APK, modify the default source set configuration\n    // to include the directory of your prebuilt .so files as follows.\n    sourceSets {\n        main {\n            jniLibs.srcDirs 'libnode/bin/'\n        }\n    }\n\n//...\n}\n")),(0,a.kt)("h3",{id:"add-simple-ui-for-testing"},"Add simple UI for testing"),(0,a.kt)("p",null,"At this point, it's already possible to run the app on an Android device and access the HTTP server from any device connected to the same local network. If the Android device's IP is ",(0,a.kt)("inlineCode",{parentName:"p"},"192.168.1.100")," point the browser at ",(0,a.kt)("inlineCode",{parentName:"p"},"http://192.168.1.100:3000/"),"."),(0,a.kt)("p",null,"However, the sample also comes with the UI to query the local HTTP server and show the response."),(0,a.kt)("h4",{id:"create-a-button-and-textview"},"Create a Button and TextView"),(0,a.kt)("p",null,"Edit the ",(0,a.kt)("inlineCode",{parentName:"p"},"activity_main.xml")," ( ",(0,a.kt)("inlineCode",{parentName:"p"},"app/src/main/res/layout/activity_main.xml")," ) in Android Studio, delete the existing ",(0,a.kt)("inlineCode",{parentName:"p"},"TextView")," and add a ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," with id ",(0,a.kt)("inlineCode",{parentName:"p"},"btVersions")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"TextView")," with id ",(0,a.kt)("inlineCode",{parentName:"p"},"tvVersions")),(0,a.kt)("h4",{id:"add-button-event-to-access-the-http-server"},"Add Button event to access the HTTP server"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"MainActivity.java"),", create an event to connect to the HTTP server when tapping the ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," and place the resulting response in the ",(0,a.kt)("inlineCode",{parentName:"p"},"TextView"),". Start by adding the required ",(0,a.kt)("inlineCode",{parentName:"p"},"import statements"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\nimport android.os.AsyncTask;\nimport java.net.*;\nimport java.io.*;\n")),(0,a.kt)("p",null,"Next, create the ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," event in ",(0,a.kt)("inlineCode",{parentName:"p"},"MainActivity"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"onCreate")," function, after the Node.js thread's initialization."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n\n//...\n\n        final Button buttonVersions = (Button) findViewById(R.id.btVersions);\n        final TextView textViewVersions = (TextView) findViewById(R.id.tvVersions);\n\n        buttonVersions.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n\n                //Network operations should be done in the background.\n                new AsyncTask<Void,Void,String>() {\n                    @Override\n                    protected String doInBackground(Void... params) {\n                        String nodeResponse="";\n                        try {\n                            URL localNodeServer = new URL("http://localhost:3000/");\n                            BufferedReader in = new BufferedReader(\n                                    new InputStreamReader(localNodeServer.openStream()));\n                            String inputLine;\n                            while ((inputLine = in.readLine()) != null)\n                                nodeResponse=nodeResponse+inputLine;\n                            in.close();\n                        } catch (Exception ex) {\n                            nodeResponse=ex.toString();\n                        }\n                        return nodeResponse;\n                    }\n                    @Override\n                    protected void onPostExecute(String result) {\n                        textViewVersions.setText(result);\n                    }\n                }.execute();\n\n            }\n        });\n    }\n')),(0,a.kt)("p",null,"Tapping the button in the app sends an asynchronous request to the local Node.js HTTP server and shows the response in the ",(0,a.kt)("inlineCode",{parentName:"p"},"TextView"),"."))}c.isMDXComponent=!0}}]);